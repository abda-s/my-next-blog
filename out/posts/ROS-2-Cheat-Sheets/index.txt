1:"$Sreact.fragment"
2:I[76074,["173","static/chunks/173-824ba44f669ab771.js","88","static/chunks/88-5ddfc2d5ad6aae48.js","177","static/chunks/app/layout-11dacbdd38697ce4.js"],"default"]
3:I[15244,[],""]
4:I[43866,[],""]
6:I[86213,[],"OutletBoundary"]
8:I[86213,[],"MetadataBoundary"]
a:I[86213,[],"ViewportBoundary"]
c:I[34835,[],""]
:HL["/my-next-blog/_next/static/css/1898c3acbbc06a56.css","style"]
:HL["/my-next-blog/_next/static/css/5eacd01f773eed7f.css","style"]
0:{"P":null,"b":"xQYf-BIXXYv0bsNHN4kgJ","p":"/my-next-blog","c":["","posts","ROS-2-Cheat-Sheets",""],"i":false,"f":[[["",{"children":["posts",{"children":[["slug","ROS-2-Cheat-Sheets","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/my-next-blog/_next/static/css/1898c3acbbc06a56.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"dark","children":["$","body",null,{"className":"bg-gray-900 text-gray-100 min-h-screen","children":[["$","$L2",null,{}],["$","main",null,{"className":"container mx-auto px-4 py-8","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-gray-800 text-gray-400 py-8","children":["$","div",null,{"className":"container mx-auto px-4 text-center","children":["$","p",null,{"children":["Â© ",2025," My Blog. All rights reserved."]}]}]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","ROS-2-Cheat-Sheets","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",[["$","link","0",{"rel":"stylesheet","href":"/my-next-blog/_next/static/css/5eacd01f773eed7f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","0Z-0Jwwy4sSIRNKeA_26a",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],null]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Salameh"}],["$","meta","2",{"name":"description","content":"A personal blog built with Next.js"}]]
7:null
d:I[53704,["173","static/chunks/173-824ba44f669ab771.js","92","static/chunks/92-3a4bbb0660b93f9c.js","858","static/chunks/app/posts/%5Bslug%5D/page-2594f1be67b20696.js"],""]
e:I[88722,["173","static/chunks/173-824ba44f669ab771.js","92","static/chunks/92-3a4bbb0660b93f9c.js","858","static/chunks/app/posts/%5Bslug%5D/page-2594f1be67b20696.js"],"default"]
10:I[48173,["173","static/chunks/173-824ba44f669ab771.js","92","static/chunks/92-3a4bbb0660b93f9c.js","858","static/chunks/app/posts/%5Bslug%5D/page-2594f1be67b20696.js"],""]
f:T54dd,<h2>ROS 2 Environment Configuration Cheat Sheet</h2>
<hr>
<h3>Commands and Explanations</h3>
<h3>1. Source the Setup Files</h3>
<pre><code class="language-bash">source /opt/ros/&lt;distro&gt;/setup.bash
</code></pre>
<ul>
<li>Activates ROS 2 in the current shell session by setting necessary environment variables.</li>
<li>Replace <code>&lt;distro&gt;</code> with the name of your installed ROS 2 distribution (e.g., <code>humble</code>, <code>galactic</code>, <code>jazzy</code>).</li>
</ul>
<h3>2. Add Sourcing to Shell Startup Script</h3>
<pre><code class="language-bash">echo &quot;source /opt/ros/&lt;distro&gt;/setup.bash&quot; &gt;&gt; ~/.bashrc
</code></pre>
<ul>
<li>Automatically sources ROS 2 every time you open a new shell.</li>
<li>Modify <code>~/.bashrc</code> to include the source command.</li>
</ul>
<p>Undo this step:</p>
<ul>
<li>Edit the <code>~/.bashrc</code> file manually to remove the line added.</li>
</ul>
<h3>3. Check Environment Variables</h3>
<pre><code class="language-bash">printenv | grep -i ROS
</code></pre>
<ul>
<li>Verifies if ROS environment variables are correctly set (e.g., <code>ROS_DISTRO</code>, <code>ROS_VERSION</code>).</li>
</ul>
<h3>4. Set the ROS_DOMAIN_ID Variable</h3>
<pre><code class="language-bash">export ROS_DOMAIN_ID=&lt;your_domain_id&gt;
</code></pre>
<ul>
<li>Sets a unique domain ID for communication between ROS 2 nodes.</li>
<li>Add to <code>~/.bashrc</code> for persistence:</li>
</ul>
<pre><code class="language-bash">echo &quot;export ROS_DOMAIN_ID=&lt;your_domain_id&gt;&quot; &gt;&gt; ~/.bashrc
</code></pre>
<h3>5. Set the ROS_AUTOMATIC_DISCOVERY_RANGE Variable</h3>
<pre><code class="language-bash">export ROS_AUTOMATIC_DISCOVERY_RANGE=&lt;range_value&gt;
</code></pre>
<ul>
<li>Limits ROS 2 discovery range, useful in environments with multiple robots.</li>
<li>Add to <code>~/.bashrc</code> for persistence:</li>
</ul>
<pre><code class="language-bash">echo &quot;export ROS_AUTOMATIC_DISCOVERY_RANGE=&lt;range_value&gt;&quot; &gt;&gt; ~/.bashrc
</code></pre>
<h2>Turtlesim and ROS2 Cheat Sheet</h2>
<hr>
<h3>1. Install Turtlesim</h3>
<ul>
<li>Install Turtlesim:</li>
</ul>
<pre><code class="language-bash">sudo apt update
sudo apt install ros-&lt;ros2-distro&gt;-turtlesim
</code></pre>
<ul>
<li>Check installed executables:</li>
</ul>
<pre><code class="language-bash">ros2 pkg executables turtlesim
</code></pre>
<h3>2. Start Turtlesim</h3>
<ul>
<li>Launch the turtlesim node:</li>
</ul>
<pre><code class="language-bash">ros2 run turtlesim turtlesim_node
</code></pre>
<h3>3. Control the Turtle</h3>
<ul>
<li>Launch the teleop node to control the turtle:</li>
</ul>
<pre><code class="language-bash">ros2 run turtlesim turtle_teleop_key
</code></pre>
<p>Additional ROS2 commands:</p>
<ul>
<li>List active nodes:</li>
</ul>
<pre><code class="language-bash">ros2 node list
</code></pre>
<ul>
<li>List available topics:</li>
</ul>
<pre><code class="language-bash">ros2 topic list
</code></pre>
<ul>
<li>List available services:</li>
</ul>
<pre><code class="language-bash">ros2 service list
</code></pre>
<ul>
<li>List available actions:</li>
</ul>
<pre><code class="language-bash">ros2 action list
</code></pre>
<h3>4. Install and Use RQT</h3>
<ul>
<li>Install RQT and plugins:</li>
</ul>
<pre><code class="language-bash">sudo apt update
sudo apt install &#39;~nros-&lt;ros2-distro&gt;-rqt*&#39;
</code></pre>
<ul>
<li>Launch RQT:</li>
</ul>
<pre><code class="language-bash">rqt
</code></pre>
<h3>5. Use RQT Service Caller</h3>
<ul>
<li>Select the Service Caller plugin:<ul>
<li>Navigate to: Plugins &gt; Services &gt; Service Caller</li>
</ul>
</li>
<li>Refresh services:<ul>
<li>Click on the Refresh button.</li>
</ul>
</li>
</ul>
<h3>6. Spawn a New Turtle (Service Call)</h3>
<ul>
<li>Call the <code>/spawn</code> service (in RQT Service Caller):<ul>
<li>Name: <code>turtle2</code></li>
<li>Coordinates: <code>x = 1.0</code>, <code>y = 1.0</code></li>
<li>Click Call to spawn a new turtle.</li>
</ul>
</li>
</ul>
<h3>7. Change Pen Settings (Service Call)</h3>
<ul>
<li>Call the <code>/set_pen</code> service (in RQT Service Caller):<ul>
<li><code>r = 255</code> (red)</li>
<li><code>width = 5</code></li>
<li>Click Call.</li>
</ul>
</li>
</ul>
<h3>8. Remap Topics for Multiple Turtles</h3>
<ul>
<li>Remap the <code>cmd_vel</code> topic for turtle2:</li>
</ul>
<pre><code class="language-bash">ros2 run turtlesim turtle_teleop_key --ros-args --remap turtle1/cmd_vel:=turtle2/cmd_vel
</code></pre>
<h3>9. Stop Turtlesim</h3>
<ul>
<li>Stop the turtlesim node:<ul>
<li>Press Ctrl + C in the <code>turtlesim_node</code> terminal.</li>
</ul>
</li>
<li>Stop the teleop node:<ul>
<li>Press q in the <code>turtle_teleop_key</code> terminal.</li>
</ul>
</li>
</ul>
<h2>Understanding Nodes in ROS 2 Cheat Sheet</h2>
<hr>
<h3>The ROS 2 Graph</h3>
<p>The ROS 2 graph represents the network of ROS 2 elements (nodes, topics, services, etc.) interacting in real-time. A robot system can be visualized as multiple nodes processing data together. Each node in ROS 2 serves a specific modular function (e.g., controlling motors or publishing sensor data).</p>
<hr>
<h3>Nodes in ROS 2</h3>
<ul>
<li><p>What is a Node?<br>  A node is an executable responsible for a specific task (e.g., controlling motors, publishing sensor data) and communicates with other nodes via topics, services, actions, or parameters.</p>
</li>
<li><p>Single or Multiple Nodes per Executable:<br>  A single ROS 2 executable (written in C++ or Python) can contain multiple nodes.</p>
</li>
</ul>
<p><img src="Pasted%20image%2020241215001625.png" alt="Image Description"></p>
<hr>
<h3>1. ros2 run</h3>
<p>The <code>ros2 run</code> command is used to run an executable from a specific package.</p>
<pre><code class="language-bash">ros2 run &lt;package_name&gt; &lt;executable_name&gt;
</code></pre>
<ul>
<li>Example to run the turtlesim:</li>
</ul>
<pre><code class="language-bash">ros2 run turtlesim turtlesim_node
</code></pre>
<p>This will open a window with a turtle in it.</p>
<h3>2. ros2 node list</h3>
<p>To list all active nodes in the ROS 2 system:</p>
<pre><code class="language-bash">ros2 node list
</code></pre>
<h3>3. ros2 node info</h3>
<p>The <code>ros2 node info &lt;node_name&gt;</code> command provides detailed information about a nodeâs publishers, subscribers, services, and actions.</p>
<ul>
<li>Example to get info about the <code>/turtlesim</code> node:</li>
</ul>
<pre><code class="language-bash">ros2 node info /turtlesim
</code></pre>
<h3>3.1 Remapping Node Names and Topics</h3>
<ul>
<li>Remap the node name using <code>--ros-args --remap</code>:</li>
</ul>
<pre><code class="language-bash">ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle
</code></pre>
<ul>
<li>This will rename <code>/turtlesim</code> to <code>/my_turtle</code>. If you run <code>ros2 node list</code>, you will see:</li>
</ul>
<pre><code class="language-bash">/my_turtle
/teleop_turtle
</code></pre>
<h2>ROS 2 Topic Commands Cheat Sheet</h2>
<hr>
<h3>Topics in ROS2</h3>
<ul>
<li>What is a topic<br>  A topic in ROS 2 is a communication channel through which nodes can publish and subscribe to messages, enabling data exchange between them.</li>
</ul>
<p><img src="Pasted%20image%2020241215005244.png" alt="Image Description"></p>
<hr>
<h3>1. rqt_graph (Graphical Tool):</h3>
<ul>
<li>Run rqt_graph to visualize the nodes and topics:</li>
</ul>
<pre><code class="language-bash">rqt_graph
</code></pre>
<ul>
<li>Open via GUI: <code>rqt &gt; Plugins &gt; Introspection &gt; Node Graph</code>.</li>
</ul>
<h3>2. ros2 topic list:</h3>
<ul>
<li>List all active topics:</li>
</ul>
<pre><code class="language-bash">ros2 topic list
</code></pre>
<ul>
<li>List topics with types:</li>
</ul>
<pre><code class="language-bash">ros2 topic list -t
</code></pre>
<h3>3. ros2 topic echo:</h3>
<ul>
<li>Display the data being published on a topic:</li>
</ul>
<pre><code class="language-bash">ros2 topic echo &lt;topic_name&gt;
</code></pre>
<ul>
<li>Example: To see <code>/turtle1/cmd_vel</code> data:</li>
</ul>
<pre><code class="language-bash">ros2 topic echo /turtle1/cmd_vel
</code></pre>
<h3>4. ros2 topic info:</h3>
<ul>
<li>Get info about a specific topic:</li>
</ul>
<pre><code class="language-bash">ros2 topic info &lt;topic_name&gt;
</code></pre>
<ul>
<li>Example: Info about <code>/turtle1/cmd_vel</code>:</li>
</ul>
<pre><code class="language-bash">ros2 topic info /turtle1/cmd_vel
</code></pre>
<h3>5. ros2 interface show:</h3>
<ul>
<li>Show the structure of a message type:</li>
</ul>
<pre><code class="language-bash">ros2 interface show &lt;msg_type&gt;
</code></pre>
<ul>
<li>Example: For <code>geometry_msgs/msg/Twist</code>:</li>
</ul>
<pre><code class="language-bash">ros2 interface show geometry_msgs/msg/Twist
</code></pre>
<h3>6. ros2 topic pub:</h3>
<ul>
<li>Publish data to a topic:</li>
</ul>
<pre><code class="language-bash">ros2 topic pub &lt;topic_name&gt; &lt;msg_type&gt; &quot;&lt;args&gt;&quot;
</code></pre>
<ul>
<li>Example: To continuously move the turtle:</li>
</ul>
<pre><code class="language-bash">ros2 topic pub /turtle1/cmd_vel geometry_msgs/msg/Twist &quot;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}&quot;
</code></pre>
<ul>
<li>Publish once:</li>
</ul>
<pre><code class="language-bash"> ros2 topic pub --once &lt;topic_name&gt; &lt;msg_type&gt; &quot;&lt;args&gt;&quot;
</code></pre>
<h3>7. ros2 topic hz:</h3>
<ul>
<li>View the rate of data publishing:</li>
</ul>
<pre><code class="language-bash">ros2 topic hz &lt;topic_name&gt;
</code></pre>
<ul>
<li>Example: Check the rate for <code>/turtle1/pose</code>:</li>
</ul>
<pre><code class="language-bash">ros2 topic hz /turtle1/pose
</code></pre>
<h3>8. ros2 topic bw:</h3>
<ul>
<li>Check bandwidth usage for a topic:</li>
</ul>
<pre><code class="language-bash">ros2 topic bw &lt;topic_name&gt;
</code></pre>
<ul>
<li>Example: Check bandwidth for <code>/turtle1/pose</code>:</li>
</ul>
<pre><code class="language-bash">ros2 topic bw /turtle1/pose
</code></pre>
<h3>9. ros2 topic find:</h3>
<ul>
<li>Find topics by message type:</li>
</ul>
<pre><code class="language-bash">ros2 topic find &lt;msg_type&gt;
</code></pre>
<ul>
<li>Example: Find topics with <code>geometry_msgs/msg/Twist</code> type:</li>
</ul>
<pre><code class="language-bash">ros2 topic find geometry_msgs/msg/Twist
</code></pre>
<h2>ROS 2 Services Cheat Sheet</h2>
<hr>
<h3>Services in ROS2:</h3>
<p>Services in ROS 2 follow a call-and-response model, where nodes request data from a service and receive a response. Unlike topics, services only provide data when specifically called by a client.</p>
<p><img src="Pasted%20image%2020241215010056.png" alt="Image Description"></p>
<hr>
<h3>1. List Active Services:</h3>
<ul>
<li>View all active services in ROS 2:</li>
</ul>
<pre><code class="language-bash">ros2 service list
</code></pre>
<h3>2. Service Type:</h3>
<ul>
<li>Check the type of a service (e.g., <code>/clear</code>):</li>
</ul>
<pre><code class="language-bash">ros2 service type /clear
</code></pre>
<h3>3. Service Info:</h3>
<ul>
<li>Get info about a service (e.g., <code>/clear</code>):</li>
</ul>
<pre><code class="language-bash">ros2 service info /clear
</code></pre>
<h3>4. Find Services by Type:</h3>
<ul>
<li>Find services of a specific type:</li>
</ul>
<pre><code class="language-bash">ros2 service find std_srvs/srv/Empty
</code></pre>
<h3>5. Show Service Interface:</h3>
<ul>
<li>View the request/response structure of a service:</li>
</ul>
<pre><code class="language-bash">ros2 interface show turtlesim/srv/Spawn
</code></pre>
<h3>6. Call a Service:</h3>
<ul>
<li>Call a service with or without arguments:</li>
</ul>
<pre><code class="language-bash">ros2 service call /clear std_srvs/srv/Empty
ros2 service call /spawn turtlesim/srv/Spawn &quot;{x: 2, y: 2, theta: 0.2, name: &#39;&#39;}&quot;
</code></pre>
<h3>7. Echo Service Data:</h3>
<ul>
<li>View service communication (request/response):</li>
</ul>
<pre><code class="language-bash">ros2 service echo /add_two_ints
</code></pre>
<p>Here is the content with the requested headings formatted as <code>####</code>:</p>
<hr>
<h2>ROS 2 Parameters Cheat Sheet</h2>
<h3>Parameters in ROS2:</h3>
<p>Parameters in ROS 2 are configuration values for nodes, like settings that can be integers, floats, booleans, strings, and lists. Each node can maintain its own parameters.</p>
<h3>1. ros2 param list</h3>
<ul>
<li>List all parameters for all nodes:</li>
</ul>
<pre><code class="language-bash">ros2 param list
</code></pre>
<ul>
<li>Example output:</li>
</ul>
<pre><code>/teleop_turtle:
	scale_angular
	scale_linear
	use_sim_time
/turtlesim:
	background_b
	background_g
    background_r
    use_sim_time
</code></pre>
<h3>2. ros2 param get</h3>
<ul>
<li>Get the value and type of a parameter:</li>
</ul>
<pre><code class="language-bash">ros2 param get &lt;node_name&gt; &lt;parameter_name&gt;
</code></pre>
<ul>
<li>Example to get the value of <code>/turtlesim background_g</code>:</li>
</ul>
<pre><code class="language-bash">ros2 param get /turtlesim background_g
</code></pre>
<p>Output:</p>
<pre><code>Integer value is: 86
</code></pre>
<h3>3. ros2 param set</h3>
<ul>
<li>Change a parameterâs value:</li>
</ul>
<pre><code class="language-bash">ros2 param set &lt;node_name&gt; &lt;parameter_name&gt; &lt;value&gt;
</code></pre>
<ul>
<li>Example to change <code>/turtlesim background_r</code>:</li>
</ul>
<pre><code class="language-bash">ros2 param set /turtlesim background_r 150
</code></pre>
<p>Output:</p>
<pre><code>Set parameter successful
</code></pre>
<h3>4. ros2 param dump</h3>
<ul>
<li>View and save a node&#39;s parameters to a file:</li>
</ul>
<pre><code class="language-bash">ros2 param dump &lt;node_name&gt; &gt; &lt;file_name&gt;.yaml
</code></pre>
<ul>
<li>Example for <code>/turtlesim</code>:</li>
</ul>
<pre><code class="language-bash">ros2 param dump /turtlesim &gt; turtlesim.yaml
</code></pre>
<h3>5. ros2 param load</h3>
<ul>
<li>Load parameters from a file into a node:</li>
</ul>
<pre><code class="language-bash">ros2 param load &lt;node_name&gt; &lt;parameter_file&gt;
</code></pre>
<ul>
<li>Example:</li>
</ul>
<pre><code class="language-bash">ros2 param load /turtlesim turtlesim.yaml
</code></pre>
<p>Output:</p>
<pre><code>Set parameter background_b successful
Set parameter background_g successful
Set parameter background_r successful
</code></pre>
<h3>6. Load Parameter File on Node Startup</h3>
<ul>
<li>Start a node with saved parameters:</li>
</ul>
<pre><code class="language-bash">ros2 run &lt;package_name&gt; &lt;executable_name&gt; --ros-args --params-file &lt;file_name&gt;
</code></pre>
<ul>
<li>Example:</li>
</ul>
<pre><code class="language-bash">ros2 run turtlesim turtlesim_node --ros-args --params-file turtlesim.yaml
</code></pre>
<p>Here&#39;s the version without any tabs before the code blocks:</p>
<hr>
<h2>ROS 2 Actions Cheat Sheet</h2>
<h3>Overview of Actions</h3>
<ul>
<li>Actions in ROS 2 are for long-running tasks that can be canceled and provide feedback.</li>
<li>Actions are a combination of Goal, Feedback, and Result.</li>
<li>They use a client-server model similar to topics but allow steady feedback and cancellation.</li>
<li>Action Client sends goals to the Action Server, which processes the goal and sends feedback/results.<br><img src="Pasted%20image%2020241215011642.png" alt="Image Description"></li>
</ul>
<hr>
<h3>1. ros2 node info</h3>
<ul>
<li>View a node&#39;s information, including its actions:</li>
</ul>
<pre><code class="language-bash">ros2 node info &lt;node_name&gt;
</code></pre>
<ul>
<li>Example for <code>/turtlesim</code>:</li>
</ul>
<pre><code class="language-bash">ros2 node info /turtlesim
</code></pre>
<p>This shows the Action Servers and Action Clients for the node.</p>
<h3>2. ros2 action list</h3>
<ul>
<li>List all actions in the ROS graph:</li>
</ul>
<pre><code class="language-bash">ros2 action list
</code></pre>
<p>This will return available actions such as <code>/turtle1/rotate_absolute</code>.</p>
<h3>3. ros2 action type</h3>
<ul>
<li>Check the action type for a specific action:</li>
</ul>
<pre><code class="language-bash">ros2 action type /turtle1/rotate_absolute
</code></pre>
<ul>
<li>Output example:</li>
</ul>
<pre><code>turtlesim/action/RotateAbsolute
</code></pre>
<h3>4. ros2 action info</h3>
<ul>
<li>View detailed information about an action:</li>
</ul>
<pre><code class="language-bash">ros2 action info /turtle1/rotate_absolute
</code></pre>
<ul>
<li>Example output:</li>
</ul>
<pre><code>Action: /turtle1/rotate_absolute
Action clients: 1
    /teleop_turtle
Action servers: 1
    /turtlesim
</code></pre>
<h3>5. ros2 interface show</h3>
<ul>
<li>Inspect the structure of the action type:</li>
</ul>
<pre><code class="language-bash">ros2 interface show turtlesim/action/RotateAbsolute
</code></pre>
<ul>
<li>This will show the structure of the goal, result, and feedback:</li>
</ul>
<pre><code>The desired heading in radians
float32 theta
---
The angular displacement in radians to the starting position
float32 delta
---
The remaining rotation in radians
float32 remaining
</code></pre>
<h3>6. ros2 action send_goal</h3>
<ul>
<li>Send a goal to an action server:</li>
</ul>
<pre><code class="language-bash">ros2 action send_goal &lt;action_name&gt; &lt;action_type&gt; &lt;values&gt;
</code></pre>
<ul>
<li>Example:</li>
</ul>
<pre><code class="language-bash">ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute &quot;{theta: 1.57}&quot;
</code></pre>
<ul>
<li>Add <code>--feedback</code> to receive feedback during goal execution:</li>
</ul>
<pre><code class="language-bash">ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute &quot;{theta: -1.57}&quot; --feedback
</code></pre>
<p>Here is the content with only the commands formatted without tabs:</p>
<h2>UsingÂ <code>rqt_console</code>Â to view logs</h2>
<hr>
<h3>1. Setup</h3>
<p>Start rqt_console in a new terminal with the following command:</p>
<pre><code class="language-bash">ros2 run rqt_console rqt_console
</code></pre>
<p>Now, start turtlesim in a new terminal with the following command:</p>
<pre><code class="language-bash">ros2 run turtlesim turtlesim_node
</code></pre>
<h3>2. Messages on rqt_console</h3>
<p>To produce log messages for rqt_console to display, letâs have the turtle run into the wall. In a new terminal, enter the ros2 topic pub command below:</p>
<pre><code class="language-bash">ros2 topic pub -r 1 /turtle1/cmd_vel geometry_msgs/msg/Twist &quot;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 0.0}}&quot;
</code></pre>
<p>Press <code>Ctrl+C</code> in the terminal where you ran the ros2 topic pub command to stop your turtle from running into the wall.</p>
<h3>3. Set the Default Logger Level</h3>
<p>You can set the default logger level when you first run the <code>/turtlesim</code> node using remapping. Enter the following command in your terminal:</p>
<pre><code class="language-bash">ros2 run turtlesim turtlesim_node --ros-args --log-level WARN
</code></pre>
<p>Here is a cheat sheet for recording and playing back data using <code>ros2 bag</code>, excluding the previously mentioned commands:</p>
<h2>Recording and Playing Back Data in ROS 2</h2>
<hr>
<h3>Managing Topic Data</h3>
<h4>1. Setup</h4>
<ul>
<li>Start the <code>/turtlesim</code> and <code>/teleop_turtle</code> nodes.</li>
<li>Create a directory for saving recordings.</li>
</ul>
<h4>2. Choose a Topic</h4>
<ul>
<li>To list available topics in your system, run:</li>
</ul>
<pre><code class="language-bash">ros2 topic list
</code></pre>
<ul>
<li>To inspect the data of a topic, run:</li>
</ul>
<pre><code class="language-bash">ros2 topic echo &lt;topic_name&gt;
</code></pre>
<h4>3. Record Topics</h4>
<ul>
<li>Single Topic:<br>  Record a single topic:</li>
</ul>
<pre><code class="language-bash">ros2 bag record &lt;topic_name&gt;
</code></pre>
<ul>
<li>Multiple Topics:<br>  Record multiple topics and specify a custom bag file name:</li>
</ul>
<pre><code class="language-bash">ros2 bag record -o &lt;file_name&gt; &lt;topic1&gt; &lt;topic2&gt; ...
</code></pre>
<ul>
<li>Record All Topics:</li>
</ul>
<pre><code class="language-bash">ros2 bag record -a
</code></pre>
<h4>4. Inspect Topic Data</h4>
<ul>
<li>To see details about a recorded bag file:</li>
</ul>
<pre><code class="language-bash">ros2 bag info &lt;bag_file_name&gt;
</code></pre>
<h4>5. Play Topic Data</h4>
<ul>
<li>To replay a bag file:</li>
</ul>
<pre><code class="language-bash">ros2 bag play &lt;bag_file_name&gt;
</code></pre>
<hr>
<h3>Managing Service Data</h3>
<h4>1. Setup</h4>
<ul>
<li>Start the <code>introspection_service</code> and <code>introspection_client</code> nodes with Service Introspection enabled.</li>
</ul>
<h4>2. Check Service Availability</h4>
<ul>
<li>List all available services:</li>
</ul>
<pre><code class="language-bash">ros2 service list
</code></pre>
<ul>
<li>To check if Service Introspection is enabled on a specific service:</li>
</ul>
<pre><code class="language-bash">ros2 service echo --flow-style &lt;service_name&gt;
</code></pre>
<h4>3. Record Services</h4>
<ul>
<li>Record a Specific Service:</li>
</ul>
<pre><code class="language-bash">ros2 bag record --service &lt;service_name&gt;
</code></pre>
<ul>
<li>Record All Services:</li>
</ul>
<pre><code>ros2 bag record --all-services
</code></pre>
<h4>4. Inspect Service Data</h4>
<ul>
<li>To inspect a recorded service data bag file:</li>
</ul>
<pre><code class="language-bash">ros2 bag info &lt;bag_file_name&gt;
</code></pre>
<h4>5. Play Service Data</h4>
<ul>
<li>To replay service data from the bag file:</li>
</ul>
<pre><code class="language-bash">ros2 bag play --publish-service-requests &lt;bag_file_name&gt;
</code></pre>
5:[["$","$Ld",null,{"id":"MathJax-config","dangerouslySetInnerHTML":{"__html":"\n            window.MathJax = {\n              tex: {\n                inlineMath: [['$', '$']],\n                displayMath: [['$$', '$$']],\n                processEscapes: true\n              },\n              options: {\n                ignoreHtmlClass: 'no-mathjax',\n                processHtmlClass: 'mathjax'\n              }\n            };\n          "}}],["$","$Ld",null,{"id":"MathJax-script","async":true,"src":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"}],["$","article",null,{"className":"max-w-3xl mx-auto break-words hyphens-auto","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"text-3xl md:text-4xl font-bold text-white mb-2","children":"ROS 2 Cheat Sheets"}],["$","p",null,{"className":"text-gray-400","children":"2024-12-14"}]]}],["$","$Le",null,{"html":"$f"}],["$","div",null,{"className":"mt-12 pt-6 border-t border-gray-700","children":["$","$L10",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 inline-flex items-center","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-5 w-5 mr-2","fill":"none","viewBox":"0 0 24 24","stroke":"currentColor","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":2,"d":"M10 19l-7-7m0 0l7-7m-7 7h18"}]}],"Back to all posts"]}]}]]}]]

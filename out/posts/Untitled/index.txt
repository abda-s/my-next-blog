1:"$Sreact.fragment"
2:I[76074,["8173","static/chunks/8173-658042c358f3b6bb.js","2088","static/chunks/2088-710900e226b741dc.js","7177","static/chunks/app/layout-e20e4149c928e1a5.js"],"default"]
3:I[15244,[],""]
4:I[43866,[],""]
6:I[86213,[],"OutletBoundary"]
8:I[86213,[],"MetadataBoundary"]
a:I[86213,[],"ViewportBoundary"]
c:I[34835,[],""]
:HL["/_next/static/css/a2cee4b11f594140.css","style"]
:HL["/_next/static/css/5eacd01f773eed7f.css","style"]
0:{"P":null,"b":"Xqy7T5hvdFOuc701nw-Xm","p":"","c":["","posts","Untitled",""],"i":false,"f":[[["",{"children":["posts",{"children":[["slug","Untitled","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a2cee4b11f594140.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"dark","children":["$","body",null,{"className":"bg-gray-900 text-gray-100 min-h-screen flex flex-col","children":[["$","$L2",null,{}],["$","main",null,{"className":"flex-1","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-gray-800 text-gray-400 py-8","children":["$","div",null,{"className":"container mx-auto px-4 text-center","children":["$","p",null,{"children":["© ",2025," My Blog. All rights reserved."]}]}]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","Untitled","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5eacd01f773eed7f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","K677DMbCzmKGK2JcZMgS1",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],null]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Salameh"}],["$","meta","2",{"name":"description","content":"A personal blog built with love by Abdullah Salameh"}]]
7:null
d:I[35525,["8173","static/chunks/8173-658042c358f3b6bb.js","3092","static/chunks/3092-76502ef1c1e154b2.js","5858","static/chunks/app/posts/%5Bslug%5D/page-22affa8891f1b25f.js"],"default"]
e:I[53704,["8173","static/chunks/8173-658042c358f3b6bb.js","3092","static/chunks/3092-76502ef1c1e154b2.js","5858","static/chunks/app/posts/%5Bslug%5D/page-22affa8891f1b25f.js"],""]
f:I[88722,["8173","static/chunks/8173-658042c358f3b6bb.js","3092","static/chunks/3092-76502ef1c1e154b2.js","5858","static/chunks/app/posts/%5Bslug%5D/page-22affa8891f1b25f.js"],"default"]
11:I[48173,["8173","static/chunks/8173-658042c358f3b6bb.js","3092","static/chunks/3092-76502ef1c1e154b2.js","5858","static/chunks/app/posts/%5Bslug%5D/page-22affa8891f1b25f.js"],""]
10:T4a3a,<pre><code class="language-cpp">#include &lt;ESP8266WiFi.h&gt;
#include &lt;WebSocketsClient.h&gt;

// Wi-Fi credentials
const char* ssid = &quot;Salameh&quot;;           // Replace with your Wi-Fi SSID
const char* password = &quot;1271985@MAHA&quot;;  // Replace with your Wi-Fi password

// WebSocket server details
const char* websocketServer = &quot;192.168.1.7&quot;;  // Server IP
const int websocketPort = 4000;               // Server port
const char* websocketPath = &quot;/&quot;;              // WebSocket path  

WebSocketsClient webSocket;
bool ledIsOn = false;  // Track LED state locally


#define LED_BUILTIN 2  // GPIO2 (D4) is the built-in LED
void webSocketEvent(WStype_t type, uint8_t* payload, size_t length) {
  switch (type) {
    case WStype_DISCONNECTED:
      Serial.println(&quot;[WSc] Disconnected&quot;);
      digitalWrite(LED_BUILTIN, HIGH);  // Turn off LED
      ledIsOn = false;
      webSocket.sendTXT(&quot;DISCONNECTED&quot;); // Notify frontend
      break;
    case WStype_CONNECTED:
      Serial.println(&quot;[WSc] Connected&quot;);
      webSocket.sendTXT(&quot;CONNECTED&quot;); // Notify frontend
      webSocket.sendTXT(ledIsOn ? &quot;ON&quot; : &quot;OFF&quot;); // Send LED state
      break;
    case WStype_TEXT:
      {
        String message = (char*)payload;
        if (message == &quot;PING&quot;) {
          webSocket.sendTXT(&quot;CONNECTED&quot;); // Respond with connected status
        } else if (message == &quot;GET_STATE&quot;) {
          webSocket.sendTXT(ledIsOn ? &quot;ON&quot; : &quot;OFF&quot;);
        } else if (message == &quot;ON&quot; || message == &quot;OFF&quot;) {
          bool requestedState = (message == &quot;ON&quot;);
          if (requestedState != ledIsOn) {
            digitalWrite(LED_BUILTIN, requestedState ? LOW : HIGH);
            ledIsOn = requestedState;
            webSocket.sendTXT(message.c_str());
            Serial.printf(&quot;LED: %s\n&quot;, message.c_str());
          }
        }
        break;
      }
    case WStype_ERROR:
      Serial.println(&quot;[WSc] Error&quot;);
      break;
  }
}
void setup() {
  Serial.begin(115200);
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH);  // Start with LED OFF
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(&quot;.&quot;);
  }
  Serial.println(&quot;\nConnected to WiFi&quot;);

  webSocket.begin(websocketServer, websocketPort, websocketPath);
  webSocket.onEvent(webSocketEvent);
}

void loop() {
  webSocket.loop();  // No heartbeats needed
}
</code></pre>
<pre><code class="language-js">import React, { useEffect, useState } from &#39;react&#39;;
import { Box, Button } from &#39;@mui/material&#39;;

const socket = new WebSocket(&#39;ws://192.168.1.7:4000&#39;);
  

const LedController = () =&gt; {
    const [ledStatus, setLedStatus] = useState(&#39;OFF&#39;);
    const [isEspConnected, setIsEspConnected] = useState(false);
    let pingTimeout = null;

  

    useEffect(() =&gt; {
        const sendPing = () =&gt; {
            if (socket.readyState === WebSocket.OPEN) {
                socket.send(&#39;PING&#39;);


                // Wait 5 seconds for a response, otherwise mark ESP as disconnected

                pingTimeout = setTimeout(() =&gt; {
                    setIsEspConnected(false);
                }, 5000);
            }
        };

  

        const handleMessage = (event) =&gt; {
            const message = event.data;
            if (message === &#39;CONNECTED&#39;) {
                setIsEspConnected(true);
                clearTimeout(pingTimeout); // Clear timeout if ESP responds
                socket.send(&#39;GET_STATE&#39;); // Ask for LED state
            } else if (message === &#39;DISCONNECTED&#39;) {
                setIsEspConnected(false);
            } else if (message === &#39;ON&#39; || message === &#39;OFF&#39;) {
                setLedStatus(message);
            }
        }

        const handleOpen = () =&gt; {
            sendPing(); // Check ESP status on WebSocket connection
            setInterval(sendPing, 5000); // Keep checking every 5 seconds
        };

        const handleClose = () =&gt; {
            setIsEspConnected(false);
        };

        socket.addEventListener(&#39;open&#39;, handleOpen);
        socket.addEventListener(&#39;message&#39;, handleMessage);
        socket.addEventListener(&#39;close&#39;, handleClose);

        return () =&gt; {
            socket.removeEventListener(&#39;open&#39;, handleOpen);
            socket.removeEventListener(&#39;message&#39;, handleMessage);
            socket.removeEventListener(&#39;close&#39;, handleClose);
            clearTimeout(pingTimeout);
        };

    }, []);

  

    const handleLedControl = (status) =&gt; {
        if (status === ledStatus || !isEspConnected) return;
        if (socket.readyState === WebSocket.OPEN) {
            socket.send(status);
        }
    };

  

    return (
        &lt;Box sx={{ marginTop: 2 }}&gt;
            &lt;Button
                variant=&quot;contained&quot;
                color=&quot;primary&quot;
                onClick={() =&gt; handleLedControl(&#39;ON&#39;)}
                sx={{ marginRight: 2 }}
                disabled={!isEspConnected}
            &gt;

                Turn LED ON

            &lt;/Button&gt;
            &lt;Button
                variant=&quot;contained&quot;
                color=&quot;secondary&quot;
                onClick={() =&gt; handleLedControl(&#39;OFF&#39;)}
                disabled={!isEspConnected}
            &gt;

                Turn LED OFF

            &lt;/Button&gt;

  

            &lt;Box sx={{
                marginTop: 2,
                width: 50,
                height: 50,
                backgroundColor: !isEspConnected ? &#39;gray&#39; : (ledStatus === &#39;ON&#39; ? &#39;green&#39; : &#39;red&#39;),
                transition: &#39;background-color 0.3s ease&#39;
            }} /&gt;
        &lt;/Box&gt;

    );

};

export default LedController;
</code></pre>
<h2 id="the-version-that-works-with-the-lots-of-users">the version that works with the lots of users</h2>
<pre><code class="language-cpp">#include &lt;ESP8266WiFi.h&gt;
#include &lt;WebSocketsClient.h&gt;
#include &lt;ArduinoJson.h&gt;

// Wi-Fi credentials
const char* ssid = &quot;Airbox-E798&quot;;           // Replace with your Wi-Fi SSID
const char* password = &quot;HH65Cm6U&quot;;  // Replace with your Wi-Fi password

// WebSocket server details
const char* websocketServer = &quot;192.168.1.164&quot;;  // Server IP
const int websocketPort = 4000;               // Server port
const char* websocketPath = &quot;/&quot;;              // WebSocket path

WebSocketsClient webSocket;
bool ledIsOn = false;  // Track LED state locally

#define LED_BUILTIN 2  // GPIO2 (D4) is the built-in LED

// Generate a unique ESP ID based on the chip ID
String espId = &quot;ESP_&quot; + String(ESP.getChipId());

// Function to send JSON message
void sendJsonMessage(const char* type, const char* value) {
    StaticJsonDocument&lt;256&gt; jsonDoc;
    jsonDoc[&quot;espId&quot;] = espId;
    jsonDoc[&quot;type&quot;] = type;
    jsonDoc[&quot;value&quot;] = value;

    String jsonString;
    serializeJson(jsonDoc, jsonString);
    webSocket.sendTXT(jsonString);
}

void webSocketEvent(WStype_t type, uint8_t* payload, size_t length) {
    switch (type) {
        case WStype_DISCONNECTED:
            Serial.println(&quot;[WSc] Disconnected&quot;);
            digitalWrite(LED_BUILTIN, HIGH);  // Turn off LED
            ledIsOn = false;
            sendJsonMessage(&quot;status&quot;, &quot;DISCONNECTED&quot;);
            break;

        case WStype_CONNECTED:
            Serial.println(&quot;[WSc] Connected&quot;);
            sendJsonMessage(&quot;status&quot;, &quot;CONNECTED&quot;);
            sendJsonMessage(&quot;ledState&quot;, ledIsOn ? &quot;ON&quot; : &quot;OFF&quot;);
            break;

        case WStype_TEXT: {
            String message = (char*)payload;
            Serial.printf(&quot;Received: %s\n&quot;, message.c_str());

            // Parse incoming JSON
            StaticJsonDocument&lt;256&gt; jsonDoc;
            DeserializationError error = deserializeJson(jsonDoc, message);
            if (error) {
                Serial.println(&quot;JSON Parsing Failed&quot;);
                return;
            }

            // Check if the message is meant for this ESP
            if (!jsonDoc.containsKey(&quot;espId&quot;) || jsonDoc[&quot;espId&quot;] != espId) {
                Serial.println(&quot;Message ignored (not for this ESP)&quot;);
                return;
            }

            // Process the command
            if (jsonDoc.containsKey(&quot;command&quot;)) {
                String command = jsonDoc[&quot;command&quot;];

                if (command == &quot;PING&quot;) {
                    sendJsonMessage(&quot;status&quot;, &quot;CONNECTED&quot;);
                } else if (command == &quot;GET_STATE&quot;) {
                    sendJsonMessage(&quot;ledState&quot;, ledIsOn ? &quot;ON&quot; : &quot;OFF&quot;);
                } else if (command == &quot;ON&quot; || command == &quot;OFF&quot;) {
                    bool requestedState = (command == &quot;ON&quot;);

                    if (requestedState != ledIsOn) {
                        digitalWrite(LED_BUILTIN, requestedState ? LOW : HIGH);
                        ledIsOn = requestedState;
                        sendJsonMessage(&quot;ledState&quot;, command.c_str());
                        Serial.printf(&quot;LED: %s\n&quot;, command.c_str());
                    }
                }
            }
            break;
        }

        case WStype_ERROR:
            Serial.println(&quot;[WSc] Error&quot;);
            break;
    }
}

void setup() {
    Serial.begin(115200);
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, HIGH);  // Start with LED OFF

    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(&quot;.&quot;);
    }
    Serial.println(&quot;\nConnected to WiFi&quot;);

    webSocket.begin(websocketServer, websocketPort, websocketPath);
    webSocket.onEvent(webSocketEvent);
}

void loop() {
    webSocket.loop();  // No heartbeats needed
}
</code></pre>
<pre><code class="language-js">import React, { useEffect, useState } from &#39;react&#39;;
import { Box, Button } from &#39;@mui/material&#39;;

const LedController = ({ espId }) =&gt; {
    const [ledStatus, setLedStatus] = useState(&#39;OFF&#39;);
    const [isEspConnected, setIsEspConnected] = useState(false);
    const [socket, setSocket] = useState(null);
    let pingTimeout = null;

    useEffect(() =&gt; {
        const newSocket = new WebSocket(&#39;ws://192.168.1.164:4000&#39;);
        setSocket(newSocket);

        const sendPing = () =&gt; {
            if (newSocket.readyState === WebSocket.OPEN) {
                const pingMessage = JSON.stringify({ espId, command: &#39;PING&#39; });
                newSocket.send(pingMessage);

                // Wait 5 seconds for a response, otherwise mark ESP as disconnected
                pingTimeout = setTimeout(() =&gt; {
                    setIsEspConnected(false);
                }, 5000);
            }
        };

        const handleMessage = (event) =&gt; {
            const message = JSON.parse(event.data);
            if (message.espId !== espId) return; // Ignore messages not meant for this ESP

            if (message.type === &#39;status&#39;) {
                if (message.value === &#39;CONNECTED&#39;) {
                    setIsEspConnected(true);
                    clearTimeout(pingTimeout);
                    newSocket.send(JSON.stringify({ espId, command: &#39;GET_STATE&#39; })); // Ask for LED state
                } else if (message.value === &#39;DISCONNECTED&#39;) {
                    setIsEspConnected(false);
                }
            } else if (message.type === &#39;ledState&#39;) {
                setLedStatus(message.value);
            }
        };

        const handleOpen = () =&gt; {
            sendPing();
            setInterval(sendPing, 5000);
        };

        const handleClose = () =&gt; {
            setIsEspConnected(false);
        };

        newSocket.addEventListener(&#39;open&#39;, handleOpen);
        newSocket.addEventListener(&#39;message&#39;, handleMessage);
        newSocket.addEventListener(&#39;close&#39;, handleClose);

        return () =&gt; {
            newSocket.removeEventListener(&#39;open&#39;, handleOpen);
            newSocket.removeEventListener(&#39;message&#39;, handleMessage);
            newSocket.removeEventListener(&#39;close&#39;, handleClose);
            clearTimeout(pingTimeout);
            newSocket.close();
        };
    }, [espId]); // Reconnect if espId changes

    const handleLedControl = (status) =&gt; {
        if (status === ledStatus || !isEspConnected) return;
        if (socket &amp;&amp; socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({ espId, command: status }));
        }
    };

    return (
        &lt;Box sx={{ display: &#39;flex&#39;, alignItems: &#39;center&#39;, justifyContent: &#39;center&#39; }}&gt;
            &lt;Button
                variant=&quot;contained&quot;
                color=&quot;primary&quot;
                onClick={() =&gt; handleLedControl(&#39;ON&#39;)}
                sx={{ marginRight: 2 }}
                disabled={!isEspConnected}
            &gt;
                Turn LED ON
            &lt;/Button&gt;
            &lt;Button
                variant=&quot;contained&quot;
                color=&quot;secondary&quot;
                onClick={() =&gt; handleLedControl(&#39;OFF&#39;)}
                disabled={!isEspConnected}
            &gt;
                Turn LED OFF
            &lt;/Button&gt;

            &lt;Box sx={{
                width: 20,
                height: 20,
                mx: 2,
                borderRadius: &#39;50%&#39;,
                backgroundColor: !isEspConnected ? &#39;gray&#39; : (ledStatus === &#39;ON&#39; ? &#39;green&#39; : &#39;red&#39;),
                transition: &#39;background-color 0.3s ease&#39;
            }} /&gt;
        &lt;/Box&gt;
    );
};

export default LedController;
</code></pre>
<h2 id="led-truns-off-from-esp-with-real-button">led truns off from esp with real button</h2>
<pre><code class="language-cpp">#include &lt;ESP8266WiFi.h&gt;
#include &lt;WebSocketsClient.h&gt;
#include &lt;ArduinoJson.h&gt;

const char* ssid = &quot;Airbox-E798&quot;;           
const char* password = &quot;HH65Cm6U&quot;;  

const char* websocketServer = &quot;192.168.1.164&quot;;  
const int websocketPort = 4000;               
const char* websocketPath = &quot;/&quot;;              

WebSocketsClient webSocket;
bool ledIsOn = false;  // Track LED state locally

#define LED_BUILTIN 2  // GPIO2 (D4) is the built-in LED
#define D1_PIN 5  // GPIO5 (D1) as input_pullup for OFF control

String espId = &quot;ESP_&quot; + String(ESP.getChipId());

void sendJsonMessage(const char* type, const char* value) {
    StaticJsonDocument&lt;256&gt; jsonDoc;
    jsonDoc[&quot;espId&quot;] = espId;
    jsonDoc[&quot;type&quot;] = type;
    jsonDoc[&quot;value&quot;] = value;

    String jsonString;
    serializeJson(jsonDoc, jsonString);
    webSocket.sendTXT(jsonString);
}

void webSocketEvent(WStype_t type, uint8_t* payload, size_t length) {
    switch (type) {
        case WStype_DISCONNECTED:
            Serial.println(&quot;[WSc] Disconnected&quot;);
            digitalWrite(LED_BUILTIN, HIGH);  
            ledIsOn = false;
            sendJsonMessage(&quot;status&quot;, &quot;DISCONNECTED&quot;);
            break;

        case WStype_CONNECTED:
            Serial.println(&quot;[WSc] Connected&quot;);
            sendJsonMessage(&quot;status&quot;, &quot;CONNECTED&quot;);
            sendJsonMessage(&quot;ledState&quot;, ledIsOn ? &quot;ON&quot; : &quot;OFF&quot;);
            break;

        case WStype_TEXT: {
            String message = (char*)payload;
            Serial.printf(&quot;Received: %s\n&quot;, message.c_str());

            StaticJsonDocument&lt;256&gt; jsonDoc;
            DeserializationError error = deserializeJson(jsonDoc, message);
            if (error) {
                Serial.println(&quot;JSON Parsing Failed&quot;);
                return;
            }

            if (!jsonDoc.containsKey(&quot;espId&quot;) || jsonDoc[&quot;espId&quot;] != espId) {
                Serial.println(&quot;Message ignored (not for this ESP)&quot;);
                return;
            }

            if (jsonDoc.containsKey(&quot;command&quot;)) {
                String command = jsonDoc[&quot;command&quot;];

                if (command == &quot;PING&quot;) {
                    sendJsonMessage(&quot;status&quot;, &quot;CONNECTED&quot;);
                } else if (command == &quot;GET_STATE&quot;) {
                    sendJsonMessage(&quot;ledState&quot;, ledIsOn ? &quot;ON&quot; : &quot;OFF&quot;);
                } else if (command == &quot;ON&quot; &amp;&amp; !ledIsOn) {
                    digitalWrite(LED_BUILTIN, LOW);  // Turn LED ON
                    ledIsOn = true;
                    sendJsonMessage(&quot;ledState&quot;, &quot;ON&quot;);
                }
            }
            break;
        }

        case WStype_ERROR:
            Serial.println(&quot;[WSc] Error&quot;);
            break;
    }
}

void setup() {
    Serial.begin(115200);
    pinMode(LED_BUILTIN, OUTPUT);
    pinMode(D1_PIN, INPUT_PULLUP);  // D1 pin as input with internal pull-up resistor
    digitalWrite(LED_BUILTIN, HIGH);  // Start with LED OFF

    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(&quot;.&quot;);
    }
    Serial.println(&quot;\nConnected to WiFi&quot;);

    webSocket.begin(websocketServer, websocketPort, websocketPath);
    webSocket.onEvent(webSocketEvent);
}

void loop() {
    webSocket.loop();

    // Check if D1 pin is connected to GND (LOW), turn off LED if it is
    if (digitalRead(D1_PIN) == LOW &amp;&amp; ledIsOn) {
        digitalWrite(LED_BUILTIN, HIGH);  // Turn LED OFF
        ledIsOn = false;
        sendJsonMessage(&quot;ledState&quot;, &quot;OFF&quot;);
    }
}
</code></pre>
5:[["$","$Ld",null,{}],["$","$Le",null,{"id":"MathJax-config","strategy":"beforeInteractive","children":"\n            window.MathJax = {\n              tex: {\n                inlineMath: [['$', '$'], ['\\(', '\\)']],\n                displayMath: [['$$', '$$'], ['\\[', '\\]']],\n              },\n              svg: {\n                fontCache: 'global'\n              }\n            };\n          "}],["$","$Le",null,{"type":"text/javascript","id":"MathJax-script","async":true,"src":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"}],["$","div",null,{"className":"container mx-auto px-4 py-8","children":["$","article",null,{"className":"max-w-3xl mx-auto break-words hyphens-auto","children":[["$","div",null,{"className":"bg-yellow-500 text-black px-4 py-2 mb-4 rounded","children":"This is a draft post"}],["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"text-3xl md:text-4xl font-bold text-white mb-2","children":"ss"}],["$","p",null,{"className":"text-gray-400","children":"2025-05-25"}]]}],["$","$Lf",null,{"html":"$10"}],["$","div",null,{"className":"mt-12 pt-6 border-t border-gray-700","children":["$","$L11",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 inline-flex items-center","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-5 w-5 mr-2","fill":"none","viewBox":"0 0 24 24","stroke":"currentColor","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":2,"d":"M10 19l-7-7m0 0l7-7m-7 7h18"}]}],"Back to all posts"]}]}]]}]}]]

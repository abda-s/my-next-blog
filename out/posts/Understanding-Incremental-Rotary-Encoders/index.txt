1:"$Sreact.fragment"
2:I[76074,["173","static/chunks/173-77f509435c11b8ed.js","88","static/chunks/88-c5b9250241c791d2.js","177","static/chunks/app/layout-925eb278f7d3cf6f.js"],"default"]
3:I[15244,[],""]
4:I[43866,[],""]
6:I[86213,[],"OutletBoundary"]
8:I[86213,[],"MetadataBoundary"]
a:I[86213,[],"ViewportBoundary"]
c:I[34835,[],""]
:HL["/_next/static/css/08005f69ab48acb2.css","style"]
:HL["/_next/static/css/5eacd01f773eed7f.css","style"]
0:{"P":null,"b":"ll68fAtL8gc_fM1989eEq","p":"","c":["","posts","Understanding-Incremental-Rotary-Encoders",""],"i":false,"f":[[["",{"children":["posts",{"children":[["slug","Understanding-Incremental-Rotary-Encoders","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/08005f69ab48acb2.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"dark","children":["$","body",null,{"className":"bg-gray-900 text-gray-100 min-h-screen","children":[["$","$L2",null,{}],["$","main",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"bg-gray-800 text-gray-400 py-8","children":["$","div",null,{"className":"container mx-auto px-4 text-center","children":["$","p",null,{"children":["© ",2025," My Blog. All rights reserved."]}]}]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","Understanding-Incremental-Rotary-Encoders","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5eacd01f773eed7f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","VWDTHsBNtsz2CKWMcPsUA",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],null]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Salameh"}],["$","meta","2",{"name":"description","content":"A personal blog built with love by Abdullah Salameh"}]]
7:null
d:I[53704,["173","static/chunks/173-77f509435c11b8ed.js","92","static/chunks/92-f102aec71d93df43.js","858","static/chunks/app/posts/%5Bslug%5D/page-6063ecd1eb4744dd.js"],""]
e:I[59414,["173","static/chunks/173-77f509435c11b8ed.js","92","static/chunks/92-f102aec71d93df43.js","858","static/chunks/app/posts/%5Bslug%5D/page-6063ecd1eb4744dd.js"],"default"]
f:I[88722,["173","static/chunks/173-77f509435c11b8ed.js","92","static/chunks/92-f102aec71d93df43.js","858","static/chunks/app/posts/%5Bslug%5D/page-6063ecd1eb4744dd.js"],"default"]
11:I[48173,["173","static/chunks/173-77f509435c11b8ed.js","92","static/chunks/92-f102aec71d93df43.js","858","static/chunks/app/posts/%5Bslug%5D/page-6063ecd1eb4744dd.js"],""]
10:T2060,<p>A <strong>rotary encoder</strong> is a device that converts the angular position of a shaft into analog or digital output signals. These encoders are commonly used in industrial automation, robotics, and consumer electronics.</p>
<h2 id="types-of-rotary-encoders">Types of Rotary Encoders</h2>
<p>There are two main types of rotary encoders:</p>
<h3 id="absolute-encoders">Absolute Encoders</h3>
<p>An <strong>absolute encoder</strong> maintains position information even when power is removed. It provides the current angular position of the shaft at any given moment.</p>
<h3 id="incremental-encoders">Incremental Encoders</h3>
<p>An <strong>incremental encoder</strong>, on the other hand, does not retain position information when powered off. It provides motion data based on changes from an initial reference point. To determine an absolute position, the system must first move to a known reference angle.</p>
<p>In this article, we will focus on <strong>incremental encoders</strong> and provide a simple ESP32 code to interface with them.</p>
<h2 id="how-incremental-encoders-work">How Incremental Encoders Work</h2>
<p>Incremental encoders have two main output signals:</p>
<ul>
<li><strong>A (Channel A)</strong></li>
<li><strong>B (Channel B)</strong></li>
</ul>
<p>These signals indicate movement and direction when the shaft rotates. Some encoders also include a third signal, <strong>Z</strong>, which serves as a reference point for position calibration.</p>
<h3 id="signal-representation">Signal Representation</h3>
<p>Here is an image illustrating signals <strong>A</strong>, <strong>B</strong>, and <strong>Z</strong>:</p>
<p><img src="/images/moving_disc_with_slits-1771498052.png" alt=""></p>
<h2 id="quadrature-outputs">Quadrature Outputs</h2>
<p>Incremental encoders employ a <strong>quadrature encoder</strong> to generate their <em>A</em> and <em>B</em> output signals. The pulses from these outputs are quadrature-encoded, meaning that <em>A</em> and <em>B</em> are phase-shifted by 90 degrees when the encoder moves at a constant speed.</p>
<p><img src="/images/Quadrature_Diagram.psd.png" alt=""></p>
<p>At any given moment, the phase difference between the <em>A</em> and <em>B</em> signals indicates the encoder&#39;s rotation direction:</p>
<ul>
<li><p>A phase difference of <strong>+90°</strong> corresponds to <strong>clockwise rotation</strong>.</p>
</li>
<li><p>A phase difference of <strong>−90°</strong> corresponds to <strong>counterclockwise rotation</strong>.</p>
</li>
</ul>
<p><img src="/images/quadrature-969270470.jpg" alt=""></p>
<p><img src="/images/Incremental_directional_encoder.gif" alt=""></p>
<h3 id="quadrature-encoding-table">Quadrature Encoding Table</h3>
<table>
<thead>
<tr>
<th>Step</th>
<th><code>outputA</code></th>
<th><code>outputB</code></th>
<th>Rotation Direction</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>LOW</td>
<td>LOW</td>
<td>Start Position</td>
</tr>
<tr>
<td>2</td>
<td>HIGH</td>
<td>LOW</td>
<td>Clockwise</td>
</tr>
<tr>
<td>3</td>
<td>HIGH</td>
<td>HIGH</td>
<td>Clockwise</td>
</tr>
<tr>
<td>4</td>
<td>LOW</td>
<td>HIGH</td>
<td>Clockwise</td>
</tr>
<tr>
<td>5</td>
<td>LOW</td>
<td>LOW</td>
<td>Next Step</td>
</tr>
<tr>
<td>6</td>
<td>LOW</td>
<td>HIGH</td>
<td>Counterclockwise</td>
</tr>
<tr>
<td>7</td>
<td>HIGH</td>
<td>HIGH</td>
<td>Counterclockwise</td>
</tr>
<tr>
<td>8</td>
<td>HIGH</td>
<td>LOW</td>
<td>Counterclockwise</td>
</tr>
<tr>
<td>9</td>
<td>LOW</td>
<td>LOW</td>
<td>Next Step</td>
</tr>
</tbody></table>
<h2 id="resolution-of-an-incremental-encoder">Resolution of an Incremental Encoder</h2>
<p>The <strong>resolution</strong> of an incremental encoder determines its precision. It is specified as:</p>
<ul>
<li><strong>Pulses per Revolution (PPR)</strong> for rotary encoders.</li>
<li><strong>Pulses per Unit Distance (e.g., mm)</strong> for linear encoders.</li>
</ul>
<p>Each signal edge (rising and falling transitions of <em>A</em> and <em>B</em>) represents a detected position change. Since each full cycle has four edges (rising <em>A</em>, rising <em>B</em>, falling <em>A</em>, falling <em>B</em>), the measurement resolution is <strong>one-fourth of a full <em>A</em> or <em>B</em> output cycle</strong>.</p>
<p>For example, a <strong>1000 pulse-per-revolution (PPR) rotary encoder</strong> has:</p>
<ul>
<li>Per-cycle measurement resolution = <strong>360° / 1000 cycles = 0.36° per pulse</strong></li>
<li>Effective resolution = <strong>0.36° / 4 = 0.09° per edge</strong></li>
</ul>
<h2 id="esp32-code-for-incremental-encoder">ESP32 Code for Incremental Encoder</h2>
<p>Below is a simple <strong>ESP32 Arduino</strong> code to read an incremental rotary encoder:</p>
<pre><code class="language-cpp">#define outputA 17
#define outputB 16

volatile int counter = 0;
volatile int aLastState;  

void IRAM_ATTR handleEncoder() {
  int aState = digitalRead(outputA);
  if (aState != aLastState) {
    if (digitalRead(outputB) != aState) {
      counter++;
    } else {
      counter--;
    }
  }
  aLastState = aState;
}

void setup() {
  pinMode(outputA, INPUT);
  pinMode(outputB, INPUT);
  Serial.begin(9600);
  aLastState = digitalRead(outputA);
  attachInterrupt(digitalPinToInterrupt(outputA), handleEncoder, CHANGE);
}

void loop() {
  static int lastCounter = 0;
  if (lastCounter != counter) {
    Serial.print(&quot;Position: &quot;);
    Serial.println(counter);
    lastCounter = counter;
  }
}
</code></pre>
<h3 id="why-use-an-interrupt-instead-of-digitalread-in-the-loop">Why Use an Interrupt Instead of <code>digitalRead</code> in the Loop?</h3>
<p>Using an <strong>interrupt function</strong> (<code>attachInterrupt</code>) allows the microcontroller to <strong>immediately detect</strong> changes in the encoder signal without continuously checking in the <code>loop()</code>. If we used <code>digitalRead</code> in the loop, we might miss some pulses, especially if the encoder rotates quickly. Interrupts ensure <strong>real-time response</strong> to changes in the encoder&#39;s state, leading to more accurate readings.</p>
<h3 id="understanding-volatile-and-iram_attr">Understanding <code>volatile</code> and <code>IRAM_ATTR</code></h3>
<ul>
<li><p><strong><code>volatile</code></strong>: This keyword tells the compiler that a variable can be modified by an interrupt, preventing optimization that might lead to incorrect behavior.</p>
</li>
<li><p><strong><code>IRAM_ATTR</code></strong>: This attribute ensures that the interrupt handler function (<code>handleEncoder</code>) is stored in <strong>IRAM (Instruction RAM)</strong> for faster execution, which is crucial for real-time processing.</p>
</li>
</ul>
<h3 id="why-cant-we-use-serialprint-in-handleencoder">Why Can&#39;t We Use <code>Serial.print</code> in <code>handleEncoder</code>?</h3>
<p>The <code>handleEncoder</code> function is an <strong>Interrupt Service Routine (ISR)</strong>, which should execute as quickly as possible. Using <code>Serial.print</code> inside an ISR can cause issues because:</p>
<ul>
<li><strong>Serial communication is slow</strong> compared to ISR execution speed.</li>
<li><strong>Serial functions use interrupts internally</strong>, which may conflict with the encoder ISR.</li>
<li><strong>Delays in ISR execution can cause missed pulses</strong>, leading to inaccurate readings.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Incremental rotary encoders are fundamental in position and motion sensing applications. Understanding how they generate quadrature signals allows precise control and tracking of rotary motion. With an ESP32 and a simple interrupt-driven approach, you can easily integrate an incremental encoder into your projects.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://howtomechatronics.com/tutorials/arduino/rotary-encoder-works-use-arduino/">https://howtomechatronics.com/tutorials/arduino/rotary-encoder-works-use-arduino/</a></li>
<li><a href="https://en.wikipedia.org/wiki/Rotary_encoder">https://en.wikipedia.org/wiki/Rotary_encoder</a></li>
<li><a href="https://en.wikipedia.org/wiki/Incremental_encoder">https://en.wikipedia.org/wiki/Incremental_encoder</a></li>
<li><a href="https://esp32io.com/tutorials/esp32-rotary-encoder">https://esp32io.com/tutorials/esp32-rotary-encoder</a></li>
</ul>
5:[["$","$Ld",null,{"id":"MathJax-config","dangerouslySetInnerHTML":{"__html":"\n            window.MathJax = {\n              tex: {\n                inlineMath: [['$', '$']],\n                displayMath: [['$$', '$$']],\n                processEscapes: true\n              },\n              options: {\n                ignoreHtmlClass: 'no-mathjax',\n                processHtmlClass: 'mathjax'\n              }\n            };\n          "}}],["$","$Ld",null,{"id":"MathJax-script","async":true,"src":"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"}],["$","div",null,{"className":"container mx-auto px-4 py-8 grid grid-cols-1 lg:grid-cols-4 gap-12","children":[["$","div",null,{"className":"hidden lg:block lg:col-span-1"}],["$","article",null,{"className":"lg:col-span-2 break-words hyphens-auto","children":[["$","header",null,{"className":"mb-8","children":[["$","h1",null,{"className":"text-3xl md:text-4xl font-bold text-white mb-2","children":"Understanding Incremental Rotary Encoders"}],["$","p",null,{"className":"text-gray-400","children":"2025-03-29"}],["$","div",null,{"className":"lg:hidden mt-8","children":[" ",["$","$Le",null,{"toc":[{"level":2,"text":"Types of Rotary Encoders","id":"types-of-rotary-encoders"},{"level":3,"text":"Absolute Encoders","id":"absolute-encoders"},{"level":3,"text":"Incremental Encoders","id":"incremental-encoders"},{"level":2,"text":"How Incremental Encoders Work","id":"how-incremental-encoders-work"},{"level":3,"text":"Signal Representation","id":"signal-representation"},{"level":2,"text":"Quadrature Outputs","id":"quadrature-outputs"},{"level":3,"text":"Quadrature Encoding Table","id":"quadrature-encoding-table"},{"level":2,"text":"Resolution of an Incremental Encoder","id":"resolution-of-an-incremental-encoder"},{"level":2,"text":"ESP32 Code for Incremental Encoder","id":"esp32-code-for-incremental-encoder"},{"level":3,"text":"Why Use an Interrupt Instead of digitalRead in the Loop?","id":"why-use-an-interrupt-instead-of-digitalread-in-the-loop"},{"level":3,"text":"Understanding volatile and IRAM_ATTR","id":"understanding-volatile-and-iram_attr"},{"level":3,"text":"Why Can't We Use Serial.print in handleEncoder?","id":"why-cant-we-use-serialprint-in-handleencoder"},{"level":2,"text":"Conclusion","id":"conclusion"},{"level":2,"text":"References","id":"references"}],"displayType":"inline"}]]}]]}],["$","$Lf",null,{"html":"$10"}],["$","div",null,{"className":"mt-12 pt-6 border-t border-gray-700","children":["$","$L11",null,{"href":"/","className":"text-blue-400 hover:text-blue-300 inline-flex items-center","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"h-5 w-5 mr-2","fill":"none","viewBox":"0 0 24 24","stroke":"currentColor","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":2,"d":"M10 19l-7-7m0 0l7-7m-7 7h18"}]}],"Back to all posts"]}]}]]}],["$","div",null,{"className":"hidden lg:block lg:col-span-1","children":["$","$Le",null,{"toc":"$5:2:props:children:1:props:children:0:props:children:2:props:children:1:props:toc","displayType":"sidebar"}]}]]}]]
